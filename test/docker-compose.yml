version: "3"

services:
  elasticsearch:
    restart: always
    # image: docker.elastic.co/elasticsearch/elasticsearch:6.8.14
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - ES_JAVA_OPTS=-Xms2048m -Xmx2048m
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    healthcheck:
      test: "wget -q -O - http://localhost:9200/_cat/health"
      interval: 1s
      timeout: 30s
      retries: 300
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network  # 통합된 네트워크 사용

  kibana:
    restart: always
    # image: docker.elastic.co/kibana/kibana:6.8.14
    image: docker.elastic.co/kibana/kibana:8.12.0
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - SERVER_PORT=5601
      - SERVER_NAME=kibana.example.org
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - app-network  # 통합된 네트워크 사용

  monstache:
    restart: always
    image: rwynn/monstache:rel5
    command: -f /home/monstache.config.toml
    volumes:
      - ./config/monstache.config.toml:/home/monstache.config.toml
    depends_on:
      - elasticsearch
      - mongo1
      - mongo2
      - mongo3
    links:
      - elasticsearch
    ports:
      - "8080:8080"
    networks:
      - app-network  # 통합된 네트워크 사용

  mongo1:
    image: "mongo"
    ports:
      - "27020:27017"
    volumes:
      - mongo1_data:/data/db
      - ./mongodb-keyfile:/mongodb-keyfile
    networks:
      - app-network  # 통합된 네트워크 사용
    command: bash -c "chmod 400 /mongodb-keyfile && chown mongodb:mongodb /mongodb-keyfile && mongod --replSet replication --bind_ip_all"

  mongo2:
    image: "mongo"
    ports:
      - "27021:27017"
    volumes:
      - mongo2_data:/data/db
      - ./mongodb-keyfile:/mongodb-keyfile
    networks:
      - app-network  # 통합된 네트워크 사용
    command: bash -c "chmod 400 /mongodb-keyfile && chown mongodb:mongodb /mongodb-keyfile && mongod --replSet replication --bind_ip_all"
    depends_on:
      - mongo1

  mongo3:
    image: "mongo"
    ports:
      - "27022:27017"
    volumes:
      - mongo3_data:/data/db
      - ./mongodb-keyfile:/mongodb-keyfile
    networks:
      - app-network  # 통합된 네트워크 사용
    command: bash -c "chmod 400 /mongodb-keyfile && chown mongodb:mongodb /mongodb-keyfile && mongod --replSet replication --bind_ip_all"
    depends_on:
      - mongo2

  # 레플리카셋 초기화 및 관리자 계정 생성
  mongosetup:
    build:
      context: ./mongodb
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - app-network  # 통합된 네트워크 사용

  # ZooKeeper (Kafka 관리용)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true' # 토픽 자동 생성
    networks:
      - app-network

  # Go 서버 (이벤트 발행)
  go-server:
    build: ./go-server
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BROKERS=kafka:9092
      # - MONGO_URI=mongodb://monstache:secure_password@mongo1:27017,mongo2:27017,mongo3:27017/damoa?replicaSet=replication&authSource=admin
      - MONGO_URI=mongodb+srv://admin:@clusterdamoa2.arr0haj.mongodb.net/damoa?retryWrites=true&w=majority&appName=ClusterDamoa2
    depends_on:
      - kafka
      - mongosetup  # MongoDB 초기화 완료 후 실행
    networks:
      - app-network

  # Go 컨슈머 (MongoDB에 저장)
  go-consumer:
    build: ./go-consumer
    environment:
      - KAFKA_BROKERS=kafka:9092
      # - MONGO_URI=mongodb://monstache:secure_password@mongo1:27017,mongo2:27017,mongo3:27017/damoa?replicaSet=replication&authSource=admin  # damoa 데이터베이스로 통일
      - MONGO_URI=mongodb+srv://admin:@clusterdamoa2.arr0haj.mongodb.net/damoa?retryWrites=true&w=majority&appName=ClusterDamoa2
    depends_on:
      - kafka
      - mongosetup  # MongoDB 초기화 완료 후 실행
    networks:
      - app-network

networks:
  app-network:  # 하나의 네트워크로 통합
    driver: bridge

volumes:
  elasticsearch_data:
  mongo1_data:
  mongo2_data:
  mongo3_data: